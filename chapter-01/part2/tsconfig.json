{
  /* 
    tsconfig.json 是ts编译器的配置文件，ts编译器可以根据它的信息来对代码进行编译
      "include" 用来指定哪些ts文件需要被编译
      路径：** 表示任意目录
            * 表示任意文件
      "exclude": 不需要被编译的目录——可选
      默认值： ["node_modules", "bower_components", "jspm_packages"]
  */

  "include": [
    "./src/**/*"
  ],
  // "exclude": [
  //   "./src/hello/**/*"
  // ]
  /* 
    compilerOptions 编译器的选项
  
  */
  "compilerOptions": {
    // target 用来指定ts被编译为的es版本
    //  "Value is not accepted. Valid values: \"ES3\", \"ES5\", \"ES6\", \"ES2015\", \"ES2016\", \"ES2017\", \"ES2018\", \"ES2019\", \"ES2020\", \"ES2021\", \"ES2022\", \"ESNext\".",
    "target": "ES5",
    // module 指定要使用的模块化规范
    // 'none', 'commonjs', 'amd', 'system', 'umd', 'es6', 'es2015', 'es2020', 'es2022', 'esnext', 'node16', 'nodenext'
    "module": "ES6",
    // lib 用来指定项目中要使用的库
    //  'es5', 'es6', 'es2015', 'es7', 'es2016', 'es2017', 'es2018', 'es2019', 'es2020', 'es2021', 'es2022', 'esnext', 'dom', 'dom.iterable', 'webworker', 'webworker.importscripts', 'webworker.iterable', 'scripthost', 'es2015.core', 'es2015.collection', 'es2015.generator', 'es2015.iterable', 'es2015.promise', 'es2015.proxy', 'es2015.reflect', 'es2015.symbol', 'es2015.symbol.wellknown', 'es2016.array.include', 'es2017.object', 'es2017.sharedmemory', 'es2017.string', 'es2017.intl', 'es2017.typedarrays', 'es2018.asyncgenerator', 'es2018.asynciterable', 'es2018.intl', 'es2018.promise', 'es2018.regexp', 'es2019.array', 'es2019.object', 'es2019.string', 'es2019.symbol', 'es2020.bigint', 'es2020.date', 'es2020.promise', 'es2020.sharedmemory', 'es2020.string', 'es2020.symbol.wellknown', 'es2020.intl', 'es2020.number', 'es2021.promise', 'es2021.string', 'es2021.weakref', 'es2021.intl', 'es2022.array', 'es2022.error', 'es2022.intl', 'es2022.object', 'es2022.sharedmemory', 'es2022.string', 'esnext.array', 'esnext.symbol', 'esnext.asynciterable', 'esnext.intl', 'esnext.bigint', 'esnext.string', 'esnext.promise', 'esnext.weakref'.
    // "lib": ["DOM"]
    // outDir 用来指定编译后文件所在的目录
    "outDir": "./dist",
    // 将代码合并成一个文件
    // 设置outFile后，所有的全局作用域中的代码会合并到同一个文件
    // "outFile": "./dist/app.js"
    /* 
      是否对js文件进行编译，默认是false
    */
    "allowJs": true,
    // 是否检查js代码是否符合语法规范，默认是false
    "checkJs": false,
    // 是否移除注释 默认为false
    "removeComments": true,
    // 不生成编译后的文件 默认为false
    "noEmit": false,

    // 所有严格检查的总开关
    "strict": true,

    // 当有错误时不生成编译后的文件， 默认为false
    "noEmitOnError": true,

    // 用来设置编译后的文件是否使用严格模式，默认是false, 模块化代码默认处于严格模式
    "alwaysStrict": true,

    // 不允许隐式的any类型
    "noImplicitAny": true,

    // 不允许不明确类型的this
    "noImplicitThis": true,

    // 严格的检查空值
    "strictNullChecks": true
  }
}